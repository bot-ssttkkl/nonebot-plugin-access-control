"""init db

修订 ID: 6c745e251f7c
父修订:
创建时间: 2023-10-08 18:00:08.483170

"""
from __future__ import annotations

from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa


revision: str = "6c745e251f7c"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = ("nonebot_plugin_access_control",)
depends_on: str | Sequence[str] | None = None


def upgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "nonebot_plugin_access_control_permission",
        sa.Column("subject", sa.String(), nullable=False),
        sa.Column("service", sa.String(), nullable=False),
        sa.Column("allow", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint(
            "subject",
            "service",
            name=op.f("pk_nonebot_plugin_access_control_permission"),
        ),
    )
    op.create_table(
        "nonebot_plugin_access_control_rate_limit_rule",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("subject", sa.String(), nullable=False),
        sa.Column("service", sa.String(), nullable=False),
        sa.Column("time_span", sa.Integer(), nullable=False),
        sa.Column("limit", sa.Integer(), nullable=False),
        sa.Column("overwrite", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint(
            "id", name=op.f("pk_nonebot_plugin_access_control_rate_limit_rule")
        ),
    )
    with op.batch_alter_table(
        "nonebot_plugin_access_control_rate_limit_rule", schema=None
    ) as batch_op:
        batch_op.create_index(
            "ix_ac_rate_limit_rule_subject_service",
            ["subject", "service"],
            unique=False,
        )

    op.create_table(
        "nonebot_plugin_access_control_rate_limit_token",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("rule_id", sa.String(), nullable=False),
        sa.Column("user", sa.String(), nullable=False),
        sa.Column("acquire_time", sa.DateTime(), nullable=False),
        sa.Column("expire_time", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["rule_id"],
            ["nonebot_plugin_access_control_rate_limit_rule.id"],
            name=op.f(
                "fk_nonebot_plugin_access_control_rate_limit_token_rule_id_nonebot_plugin_access_control_rate_limit_rule"
            ),
        ),
        sa.PrimaryKeyConstraint(
            "id", name=op.f("pk_nonebot_plugin_access_control_rate_limit_token")
        ),
    )
    with op.batch_alter_table(
        "nonebot_plugin_access_control_rate_limit_token", schema=None
    ) as batch_op:
        batch_op.create_index(
            "ix_ac_rate_limit_token_expire_time", ["expire_time"], unique=False
        )
        batch_op.create_index(
            "ix_ac_rate_limit_token_rule_id", ["rule_id"], unique=False
        )

    # ### end Alembic commands ###


def downgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table(
        "nonebot_plugin_access_control_rate_limit_token", schema=None
    ) as batch_op:
        batch_op.drop_index("ix_ac_rate_limit_token_rule_id")
        batch_op.drop_index("ix_ac_rate_limit_token_expire_time")

    op.drop_table("nonebot_plugin_access_control_rate_limit_token")
    with op.batch_alter_table(
        "nonebot_plugin_access_control_rate_limit_rule", schema=None
    ) as batch_op:
        batch_op.drop_index("ix_ac_rate_limit_rule_subject_service")

    op.drop_table("nonebot_plugin_access_control_rate_limit_rule")
    op.drop_table("nonebot_plugin_access_control_permission")
    # ### end Alembic commands ###
